#pragma use_dxc
#pragma kernel PreScan
#pragma kernel BlockSum
#pragma kernel GlobalScan

#include <Assets/_Shaders/Constants.cginc>

RWStructuredBuffer<uint> data; // size =  _dataLength 
RWStructuredBuffer<uint> blockSumsData; // size = THREADS_PER_BLOCK 

int _dataSize;

groupshared uint scanTile[THREADS_PER_BLOCK / WARP_SIZE];
groupshared uint blockSumsTile[THREADS_PER_BLOCK];


[numthreads(THREADS_PER_BLOCK,1,1)]
void PreScan(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    const uint threadId = tid.x;
    const uint groupId = gid.x;
    const uint warpId = threadId / WARP_SIZE;
    const uint laneId = threadId % WARP_SIZE;

    const uint element = data[groupId * THREADS_PER_BLOCK + threadId];
    AllMemoryBarrierWithGroupSync();
    const uint wavePrefix = WavePrefixSum(element);

    if (laneId == WARP_SIZE - 1)
    {
        scanTile[warpId] = wavePrefix + element;
    }
    GroupMemoryBarrierWithGroupSync();

    if (threadId < THREADS_PER_BLOCK / WARP_SIZE)
    {
        const uint warpSum = scanTile[threadId];
        GroupMemoryBarrier();
        const uint warpPrefix = WavePrefixSum(warpSum);
        scanTile[threadId] = warpPrefix;

        if (threadId == THREADS_PER_BLOCK / WARP_SIZE - 1)
        {
            blockSumsData[groupId] = warpPrefix + warpSum;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    data[groupId * THREADS_PER_BLOCK + threadId] = wavePrefix + scanTile[warpId];
}

[numthreads(THREADS_PER_BLOCK,1,1)]
void BlockSum(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    // our data has THREADS_PER_BLOCK * BLOCK_SIZE elements.
    // each block in LocalRadixSort step produces 2 ^ RADIX = BUCKET_SIZE elements
    // so, whole number of sizesData array will be BLOCK_SIZE * BUCKET_SIZE elements 
    // here each block process THREADS_PER_BLOCK elements
    // so, number of blocks will be BLOCK_SIZE / (THREADS_PER_BLOCK / BUCKET_SIZE)
    const uint blockSize = _dataSize / THREADS_PER_BLOCK;// BLOCK_SIZE / (THREADS_PER_BLOCK / BUCKET_SIZE);

    const uint threadId = tid.x;
    const uint warpId = threadId / WARP_SIZE;
    const uint laneId = threadId % WARP_SIZE;

    const uint element = blockSumsData[threadId];
    AllMemoryBarrierWithGroupSync();
    const uint wavePrefix = WavePrefixSum(element);

    if (laneId == WARP_SIZE - 1)
    {
        scanTile[warpId] = wavePrefix + element;
    }
    GroupMemoryBarrierWithGroupSync();

    if (threadId < blockSize / WARP_SIZE)
    {
        const uint warpSum = scanTile[threadId];
        GroupMemoryBarrier();
        const uint warpPrefix = WavePrefixSum(warpSum);
        scanTile[threadId] = warpPrefix;
    }

    GroupMemoryBarrierWithGroupSync();
    blockSumsData[threadId] = wavePrefix + scanTile[warpId];
}

[numthreads(THREADS_PER_BLOCK,1,1)]
void GlobalScan(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    const uint threadId = tid.x;
    const uint groupId = gid.x;

    const uint element = data[groupId * THREADS_PER_BLOCK + threadId];
    const uint blockSum = blockSumsData[groupId];
    AllMemoryBarrierWithGroupSync();
    data[groupId * THREADS_PER_BLOCK + threadId] = element + blockSum;
}
