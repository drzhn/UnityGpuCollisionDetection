#pragma kernel PhysicsIntegration

#include <Assets/_Shaders/Constants.cginc>

RWStructuredBuffer<float3> _positionBuffer; // size = DATA_BLOCK_SIZE * THREADS_PER_BLOCK
RWStructuredBuffer<float3> _prevPositions; // size = DATA_BLOCK_SIZE * THREADS_PER_BLOCK

float _velocityDamping;
float _deltaTime;
float _prevDeltaTime;

[numthreads(THREADS_PER_BLOCK,1,1)]
void PhysicsIntegration(uint3 tid : SV_DispatchThreadID)
{
    const uint id = tid.x;
    const float3 prevPosition = _prevPositions[id];
    const float3 newPosition = _positionBuffer[id];
    
    float3 velocity = (newPosition - prevPosition) / _prevDeltaTime;
    
    velocity += 9.8 * _deltaTime * float3(0, -1, 0);
    velocity *= _velocityDamping;

    _positionBuffer[id] =  newPosition + velocity * _deltaTime;
    _prevPositions[id] = newPosition;
}
