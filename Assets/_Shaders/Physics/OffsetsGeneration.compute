#pragma kernel ChangesGeneration
#pragma kernel OffsetsGeneration

#include <Assets/_Shaders/Constants.cginc>

StructuredBuffer<uint> _cellHash; // size = BLOCK_SIZE * THREADS_PER_BLOCK
RWStructuredBuffer<uint> _changes; // size = BLOCK_SIZE * THREADS_PER_BLOCK
RWStructuredBuffer<uint> _offsets; // size = BLOCK_SIZE * THREADS_PER_BLOCK
RWStructuredBuffer<int> _numOverlaps; // size = 1
RWStructuredBuffer<int> _numOffsets; // size = 1

[numthreads(THREADS_PER_BLOCK,1,1)]
void ChangesGeneration(uint3 tid : SV_DispatchThreadID)
{
    const uint id = tid.x;
    const uint lastIndex = THREADS_PER_BLOCK * BLOCK_SIZE - 1;
    if (id == lastIndex)
    {
        _changes[id] = 0;
        return;
    }
    _changes[id] = _cellHash[id] < _cellHash[id + 1] ? 1 : 0;
    if (_cellHash[id] != 0xFFFFFFFF && _cellHash[id + 1] == 0xFFFFFFFF)
    {
        _numOverlaps[0] = id;
    }
}

// After that we generate prefix sum and put it back to changes array 

[numthreads(THREADS_PER_BLOCK,1,1)]
void OffsetsGeneration(uint3 tid : SV_DispatchThreadID)
{
    const uint id = tid.x;
    
    if (id == 0)
    {
        _offsets[0] = 0;
        return;
    }
    if (id == THREADS_PER_BLOCK * BLOCK_SIZE -1)
    {
        _numOffsets[0] = _changes[id];
    }

    if (_changes[id] > _changes[id - 1])
    {
        _offsets[_changes[id]] = id;
    }
}
