#pragma kernel CollisionDetection

#include <Assets/_Shaders/Constants.cginc>

RWStructuredBuffer<float3> _positionBuffer; // size = DATA_BLOCK_SIZE * THREADS_PER_BLOCK

StructuredBuffer<uint> _cellHash; // size = BLOCK_SIZE * THREADS_PER_BLOCK
StructuredBuffer<uint> _packedCellTypeControlAndIndex; // size = BLOCK_SIZE * THREADS_PER_BLOCK
StructuredBuffer<uint> _offsets; // size = BLOCK_SIZE * THREADS_PER_BLOCK

// we will apply collision detection and integration in 8 steps for each cell type;
uint _currentCellType;
uint _numOverlaps;
uint _numOffsets;

#define DIAMETER 1

struct ObjectData
{
    bool isHome;
    uint cellType;
    uint controlBits;
    uint objectIndex;
};

ObjectData UnpackObjectData(uint packed)
{
    ObjectData data;
    data.isHome = ((packed >> 31) & ((1 << 1) - 1)) == 1;
    data.cellType = (packed >> 28) & ((1 << 3) - 1);
    data.controlBits = (packed >> 20) & ((1 << 8) - 1);
    data.objectIndex = (packed >> 0) & ((1 << 20) - 1);
    return data;
}

uint GetCellType(uint hash)
{
    uint x = (hash >> XSHIFT) & ((1 << 10) - 1);
    uint y = (hash >> YSHIFT) & ((1 << 10) - 1);
    uint z = (hash >> ZSHIFT) & ((1 << 10) - 1);

    return CalculateCellType(x, y, z);
}

void CheckCollision(uint index, uint id2)
{
    const float3 objectPos = _positionBuffer[index];
    const float3 collisionPos = _positionBuffer[id2];
    const float currentDistance = length(collisionPos - objectPos);
    const float desiredDistance = DIAMETER;
    if (currentDistance < desiredDistance)
    {
        float3 dir = normalize(objectPos - collisionPos) * (desiredDistance-currentDistance)/2;
        // float k =  0.5;
        // _positionBuffer[index] -= k * 0.95 * dir;
        _positionBuffer[index] += dir;
        _positionBuffer[id2] -= dir;

        // float3 dir = (currentDistance - desiredDistance) / currentDistance * (objectPos - collisionPos);
        // float k = 0.5;//_pointsDataBuffer[index].mass / (_pointsDataBuffer[index].mass + _pointsDataBuffer[j].mass);
        // _positionBuffer[index] -= k * 0.95 * dir;
    }
}

[numthreads(THREADS_PER_BLOCK,1,1)]
void CollisionDetection(uint3 tid : SV_DispatchThreadID)
{
    const uint id = tid.x;
    if (id >= _numOffsets)
    {
        return;
    }
    
    const uint offsetStart = _offsets[id];
    const uint offsetEnd = _offsets[id + 1];
    if (offsetEnd - offsetStart <= 1)
    {
        return;
    }
    for (uint i = offsetStart; i < offsetEnd - 1; i++)
    {
        const uint cellId1 = _cellHash[i];
        if (cellId1 == 0xFFFFFFFF || GetCellType(cellId1) != _currentCellType)
        {
            return;
        }
        const ObjectData data1 = UnpackObjectData(_packedCellTypeControlAndIndex[i]);
        if (!data1.isHome)
        {
            continue;;
        }

        for (uint j = i + 1; j < offsetEnd; j++)
        {
            const ObjectData data2 = UnpackObjectData(_packedCellTypeControlAndIndex[j]);
        
            CheckCollision(data1.objectIndex, data2.objectIndex);
        }
    }
}
